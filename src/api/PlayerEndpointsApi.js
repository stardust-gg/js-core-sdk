/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-05-08T04:33:59Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import SDPlayerCountResponse from '../model/SDPlayerCountResponse';
import SDPlayerCreateRequest from '../model/SDPlayerCreateRequest';
import SDPlayerCreateResponse from '../model/SDPlayerCreateResponse';
import SDPlayerGetAllResponse from '../model/SDPlayerGetAllResponse';
import SDPlayerGetIdResponse from '../model/SDPlayerGetIdResponse';
import SDPlayerGetIdsResponse from '../model/SDPlayerGetIdsResponse';
import SDPlayerGetInventoryResponse from '../model/SDPlayerGetInventoryResponse';
import SDPlayerGetResponse from '../model/SDPlayerGetResponse';
import SDPlayerMutateRequest from '../model/SDPlayerMutateRequest';
import SDPlayerWalletGetResponse from '../model/SDPlayerWalletGetResponse';
import SDPlayerWithdrawRequest from '../model/SDPlayerWithdrawRequest';

/**
* PlayerEndpoints service.
* @module api/PlayerEndpointsApi
* @version 0.0.3
*/
export default class PlayerEndpointsApi {

    /**
    * Constructs a new PlayerEndpointsApi. 
    * @alias module:api/PlayerEndpointsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the playerCountGet operation.
     * @callback module:api/PlayerEndpointsApi~playerCountGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SDPlayerCountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Player Count
     * Get Player count within a game
     * @param {module:api/PlayerEndpointsApi~playerCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SDPlayerCountResponse}
     */
    playerCountGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SDPlayerCountResponse;
      return this.apiClient.callApi(
        '/player/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerCreatePost operation.
     * @callback module:api/PlayerEndpointsApi~playerCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SDPlayerCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Player
     * Create a Player for a game. Returns their player id which can be used to reference them later in Stardust's system
     * @param {module:model/SDPlayerCreateRequest} sDPlayerCreateRequest 
     * @param {module:api/PlayerEndpointsApi~playerCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SDPlayerCreateResponse}
     */
    playerCreatePost(sDPlayerCreateRequest, callback) {
      let postBody = sDPlayerCreateRequest;
      // verify the required parameter 'sDPlayerCreateRequest' is set
      if (sDPlayerCreateRequest === undefined || sDPlayerCreateRequest === null) {
        throw new Error("Missing the required parameter 'sDPlayerCreateRequest' when calling playerCreatePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SDPlayerCreateResponse;
      return this.apiClient.callApi(
        '/player/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerGetAllGet operation.
     * @callback module:api/PlayerEndpointsApi~playerGetAllGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SDPlayerGetAllResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Players
     * Get the List of All Players in Game
     * @param {Object} opts Optional parameters
     * @param {String} [start] position in list
     * @param {String} [filter] Find a substring within the Player unique ID field
     * @param {String} [limit] maximum items returned in list
     * @param {module:api/PlayerEndpointsApi~playerGetAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SDPlayerGetAllResponse>}
     */
    playerGetAllGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'filter': opts['filter'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SDPlayerGetAllResponse];
      return this.apiClient.callApi(
        '/player/get-all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerGetGet operation.
     * @callback module:api/PlayerEndpointsApi~playerGetGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SDPlayerGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Player
     * Get Details of a Player Within a Game
     * @param {String} playerId Player id
     * @param {module:api/PlayerEndpointsApi~playerGetGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SDPlayerGetResponse}
     */
    playerGetGet(playerId, callback) {
      let postBody = null;
      // verify the required parameter 'playerId' is set
      if (playerId === undefined || playerId === null) {
        throw new Error("Missing the required parameter 'playerId' when calling playerGetGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'playerId': playerId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SDPlayerGetResponse;
      return this.apiClient.callApi(
        '/player/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerGetIdGet operation.
     * @callback module:api/PlayerEndpointsApi~playerGetIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SDPlayerGetIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Player ID
     * Get a Player's ID via their Unique ID
     * @param {String} uniqueId Player's Unique ID
     * @param {module:api/PlayerEndpointsApi~playerGetIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SDPlayerGetIdResponse}
     */
    playerGetIdGet(uniqueId, callback) {
      let postBody = null;
      // verify the required parameter 'uniqueId' is set
      if (uniqueId === undefined || uniqueId === null) {
        throw new Error("Missing the required parameter 'uniqueId' when calling playerGetIdGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'uniqueId': uniqueId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SDPlayerGetIdResponse;
      return this.apiClient.callApi(
        '/player/get-id', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerGetIdsGet operation.
     * @callback module:api/PlayerEndpointsApi~playerGetIdsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SDPlayerGetIdsResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Player IDs
     * Get All Player IDs for a Given Game
     * @param {module:api/PlayerEndpointsApi~playerGetIdsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SDPlayerGetIdsResponse>}
     */
    playerGetIdsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SDPlayerGetIdsResponse];
      return this.apiClient.callApi(
        '/player/get-ids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerGetInventoryGet operation.
     * @callback module:api/PlayerEndpointsApi~playerGetInventoryGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SDPlayerGetInventoryResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Player Inventory
     * Get a players inventory and all the items it holds
     * @param {String} playerId Player id
     * @param {Object} opts Optional parameters
     * @param {String} [start] position in list
     * @param {String} [tokenIds] Comma-Separated String of token ids (ex. '3589, 3580')
     * @param {String} [limit] maximum items returned in list
     * @param {module:api/PlayerEndpointsApi~playerGetInventoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SDPlayerGetInventoryResponse>}
     */
    playerGetInventoryGet(playerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'playerId' is set
      if (playerId === undefined || playerId === null) {
        throw new Error("Missing the required parameter 'playerId' when calling playerGetInventoryGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'tokenIds': opts['tokenIds'],
        'playerId': playerId,
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SDPlayerGetInventoryResponse];
      return this.apiClient.callApi(
        '/player/get-inventory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerMutatePut operation.
     * @callback module:api/PlayerEndpointsApi~playerMutatePutCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mutate Player
     * Change player data
     * @param {module:model/SDPlayerMutateRequest} sDPlayerMutateRequest 
     * @param {module:api/PlayerEndpointsApi~playerMutatePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    playerMutatePut(sDPlayerMutateRequest, callback) {
      let postBody = sDPlayerMutateRequest;
      // verify the required parameter 'sDPlayerMutateRequest' is set
      if (sDPlayerMutateRequest === undefined || sDPlayerMutateRequest === null) {
        throw new Error("Missing the required parameter 'sDPlayerMutateRequest' when calling playerMutatePut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/player/mutate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerRemoveDelete operation.
     * @callback module:api/PlayerEndpointsApi~playerRemoveDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Player
     * Removes (hides) a player from your game. This is not permanent.
     * @param {String} playerId Player Id returned from player/create a UUID, i.e. 802760b0-2bb5-4fba-9237-895ed02cf8d8
     * @param {module:api/PlayerEndpointsApi~playerRemoveDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    playerRemoveDelete(playerId, callback) {
      let postBody = null;
      // verify the required parameter 'playerId' is set
      if (playerId === undefined || playerId === null) {
        throw new Error("Missing the required parameter 'playerId' when calling playerRemoveDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'playerId': playerId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/player/remove', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerWalletGetGet operation.
     * @callback module:api/PlayerEndpointsApi~playerWalletGetGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SDPlayerWalletGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Player Wallet
     * Get player's wallet within a game
     * @param {String} playerId Player id
     * @param {module:api/PlayerEndpointsApi~playerWalletGetGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SDPlayerWalletGetResponse}
     */
    playerWalletGetGet(playerId, callback) {
      let postBody = null;
      // verify the required parameter 'playerId' is set
      if (playerId === undefined || playerId === null) {
        throw new Error("Missing the required parameter 'playerId' when calling playerWalletGetGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'playerId': playerId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SDPlayerWalletGetResponse;
      return this.apiClient.callApi(
        '/player/wallet-get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerWithdrawPost operation.
     * @callback module:api/PlayerEndpointsApi~playerWithdrawPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Withdraw From Player
     * Withdraw a Player's Tokens from their Stardust Wallet
     * @param {module:model/SDPlayerWithdrawRequest} sDPlayerWithdrawRequest 
     * @param {module:api/PlayerEndpointsApi~playerWithdrawPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    playerWithdrawPost(sDPlayerWithdrawRequest, callback) {
      let postBody = sDPlayerWithdrawRequest;
      // verify the required parameter 'sDPlayerWithdrawRequest' is set
      if (sDPlayerWithdrawRequest === undefined || sDPlayerWithdrawRequest === null) {
        throw new Error("Missing the required parameter 'sDPlayerWithdrawRequest' when calling playerWithdrawPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/player/withdraw', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
