/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-05-08T04:33:59Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import SDOrderBuyRequest from '../model/SDOrderBuyRequest';
import SDOrderCreateRequest from '../model/SDOrderCreateRequest';
import SDOrderCreateResponse from '../model/SDOrderCreateResponse';
import SDOrderGetAllResponse from '../model/SDOrderGetAllResponse';
import SDOrderGetResponse from '../model/SDOrderGetResponse';

/**
* OrderEndpoints service.
* @module api/OrderEndpointsApi
* @version 0.0.3
*/
export default class OrderEndpointsApi {

    /**
    * Constructs a new OrderEndpointsApi. 
    * @alias module:api/OrderEndpointsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the orderBuyPost operation.
     * @callback module:api/OrderEndpointsApi~orderBuyPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Buy Order
     * Buy a Order
     * @param {module:model/SDOrderBuyRequest} sDOrderBuyRequest 
     * @param {module:api/OrderEndpointsApi~orderBuyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    orderBuyPost(sDOrderBuyRequest, callback) {
      let postBody = sDOrderBuyRequest;
      // verify the required parameter 'sDOrderBuyRequest' is set
      if (sDOrderBuyRequest === undefined || sDOrderBuyRequest === null) {
        throw new Error("Missing the required parameter 'sDOrderBuyRequest' when calling orderBuyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/order/buy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderCancelDelete operation.
     * @callback module:api/OrderEndpointsApi~orderCancelDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel Order
     * Cancels a Order
     * @param {String} orderId Order Id unsigned 32 bit integer
     * @param {module:api/OrderEndpointsApi~orderCancelDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    orderCancelDelete(orderId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling orderCancelDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'orderId': orderId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/order/cancel', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderCreatePost operation.
     * @callback module:api/OrderEndpointsApi~orderCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SDOrderCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Order
     * Adds a New Order
     * @param {module:model/SDOrderCreateRequest} sDOrderCreateRequest 
     * @param {module:api/OrderEndpointsApi~orderCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SDOrderCreateResponse}
     */
    orderCreatePost(sDOrderCreateRequest, callback) {
      let postBody = sDOrderCreateRequest;
      // verify the required parameter 'sDOrderCreateRequest' is set
      if (sDOrderCreateRequest === undefined || sDOrderCreateRequest === null) {
        throw new Error("Missing the required parameter 'sDOrderCreateRequest' when calling orderCreatePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SDOrderCreateResponse;
      return this.apiClient.callApi(
        '/order/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderGetAllGet operation.
     * @callback module:api/OrderEndpointsApi~orderGetAllGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SDOrderGetAllResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Orders
     * Get the List of Game Orders
     * @param {String} start position in list
     * @param {String} limit maximum templates returned in list
     * @param {Object} opts Optional parameters
     * @param {String} [playerId] A Games PlayerId to filter by player
     * @param {String} [status] State of the order to filter. Default is offer. ('offer', 'accepted', 'cancelled')
     * @param {module:api/OrderEndpointsApi~orderGetAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SDOrderGetAllResponse>}
     */
    orderGetAllGet(start, limit, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling orderGetAllGet");
      }
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling orderGetAllGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'start': start,
        'playerId': opts['playerId'],
        'status': opts['status'],
        'limit': limit
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SDOrderGetAllResponse];
      return this.apiClient.callApi(
        '/order/get-all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderGetGet operation.
     * @callback module:api/OrderEndpointsApi~orderGetGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SDOrderGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Order
     * Get a Game Order
     * @param {String} orderId An Order ID
     * @param {module:api/OrderEndpointsApi~orderGetGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SDOrderGetResponse}
     */
    orderGetGet(orderId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling orderGetGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'orderId': orderId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SDOrderGetResponse;
      return this.apiClient.callApi(
        '/order/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
