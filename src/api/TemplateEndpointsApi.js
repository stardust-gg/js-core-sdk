/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-05-08T04:33:59Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import SDTemplateCountResponse from '../model/SDTemplateCountResponse';
import SDTemplateCreateRequest from '../model/SDTemplateCreateRequest';
import SDTemplateCreateResponse from '../model/SDTemplateCreateResponse';
import SDTemplateGetAllResponse from '../model/SDTemplateGetAllResponse';
import SDTemplateGetResponse from '../model/SDTemplateGetResponse';
import SDTemplateGetTokensResponse from '../model/SDTemplateGetTokensResponse';
import SDTemplateMutateRequest from '../model/SDTemplateMutateRequest';

/**
* TemplateEndpoints service.
* @module api/TemplateEndpointsApi
* @version 0.0.3
*/
export default class TemplateEndpointsApi {

    /**
    * Constructs a new TemplateEndpointsApi. 
    * @alias module:api/TemplateEndpointsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the templateCountGet operation.
     * @callback module:api/TemplateEndpointsApi~templateCountGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SDTemplateCountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Template Count
     * Get a Template's Count Within a Game
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Find a substring within the Template name field
     * @param {module:api/TemplateEndpointsApi~templateCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SDTemplateCountResponse}
     */
    templateCountGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SDTemplateCountResponse;
      return this.apiClient.callApi(
        '/template/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templateCreatePost operation.
     * @callback module:api/TemplateEndpointsApi~templateCreatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SDTemplateCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Template
     * Adds a New Token Template that lets Players Acquire that Token using the Token/Mint Endpoint
     * @param {module:model/SDTemplateCreateRequest} sDTemplateCreateRequest 
     * @param {module:api/TemplateEndpointsApi~templateCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SDTemplateCreateResponse}
     */
    templateCreatePost(sDTemplateCreateRequest, callback) {
      let postBody = sDTemplateCreateRequest;
      // verify the required parameter 'sDTemplateCreateRequest' is set
      if (sDTemplateCreateRequest === undefined || sDTemplateCreateRequest === null) {
        throw new Error("Missing the required parameter 'sDTemplateCreateRequest' when calling templateCreatePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SDTemplateCreateResponse;
      return this.apiClient.callApi(
        '/template/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templateGetAllGet operation.
     * @callback module:api/TemplateEndpointsApi~templateGetAllGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SDTemplateGetAllResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Templates
     * Get All of the Templates Within a Game
     * @param {String} start position in list
     * @param {String} limit maximum templates returned in list
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Find a substring within the Template name field
     * @param {module:api/TemplateEndpointsApi~templateGetAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SDTemplateGetAllResponse>}
     */
    templateGetAllGet(start, limit, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling templateGetAllGet");
      }
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling templateGetAllGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'start': start,
        'filter': opts['filter'],
        'limit': limit
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SDTemplateGetAllResponse];
      return this.apiClient.callApi(
        '/template/get-all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templateGetGet operation.
     * @callback module:api/TemplateEndpointsApi~templateGetGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SDTemplateGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Template
     * Get the Details of a Template
     * @param {String} templateId Template Id such as 3589)
     * @param {module:api/TemplateEndpointsApi~templateGetGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SDTemplateGetResponse}
     */
    templateGetGet(templateId, callback) {
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling templateGetGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'templateId': templateId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SDTemplateGetResponse;
      return this.apiClient.callApi(
        '/template/get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templateGetTokensGet operation.
     * @callback module:api/TemplateEndpointsApi~templateGetTokensGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SDTemplateGetTokensResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Template Tokens
     * Get a List of All Minted Tokens from a Given Template
     * @param {String} templateId The ID of the Template
     * @param {Object} opts Optional parameters
     * @param {String} [start] position in list
     * @param {String} [limit] maximum templates returned in list
     * @param {String} [includeDeleted] If true tokens from deleted players are included in the response
     * @param {module:api/TemplateEndpointsApi~templateGetTokensGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SDTemplateGetTokensResponse>}
     */
    templateGetTokensGet(templateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling templateGetTokensGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'templateId': templateId,
        'limit': opts['limit'],
        'includeDeleted': opts['includeDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SDTemplateGetTokensResponse];
      return this.apiClient.callApi(
        '/template/get-tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templateMutatePut operation.
     * @callback module:api/TemplateEndpointsApi~templateMutatePutCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mutate Template
     * Mutates a Property of a Template, Which in Turn will Affect the Inherited Property on All of the Tokens Created from this Template (via token/mint)
     * @param {module:model/SDTemplateMutateRequest} sDTemplateMutateRequest 
     * @param {module:api/TemplateEndpointsApi~templateMutatePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    templateMutatePut(sDTemplateMutateRequest, callback) {
      let postBody = sDTemplateMutateRequest;
      // verify the required parameter 'sDTemplateMutateRequest' is set
      if (sDTemplateMutateRequest === undefined || sDTemplateMutateRequest === null) {
        throw new Error("Missing the required parameter 'sDTemplateMutateRequest' when calling templateMutatePut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/template/mutate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templatePropsRemoveDelete operation.
     * @callback module:api/TemplateEndpointsApi~templatePropsRemoveDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Template Property
     * Removes a Templates Property from Your Game
     * @param {String} templateId Template Id returned from template/create (ex. 5)
     * @param {String} props Stringify Array of template mutable property names ex: '[\"exp\", \"health\"]' }
     * @param {module:api/TemplateEndpointsApi~templatePropsRemoveDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    templatePropsRemoveDelete(templateId, props, callback) {
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling templatePropsRemoveDelete");
      }
      // verify the required parameter 'props' is set
      if (props === undefined || props === null) {
        throw new Error("Missing the required parameter 'props' when calling templatePropsRemoveDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'templateId': templateId,
        'props': props
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/template/props-remove', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the templateRemoveDelete operation.
     * @callback module:api/TemplateEndpointsApi~templateRemoveDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Template
     * Removes a Template from Your Game. If Players have Instances of this Template from the token/mint Command, Their Tokens will NOT be Removed
     * @param {String} templateId Template Id returned from template/create (ex. 5)
     * @param {module:api/TemplateEndpointsApi~templateRemoveDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    templateRemoveDelete(templateId, callback) {
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling templateRemoveDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'templateId': templateId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/template/remove', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
