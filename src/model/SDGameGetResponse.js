/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-05-08T04:33:59Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SDGameGetResponseFeesInner from './SDGameGetResponseFeesInner';

/**
 * The SDGameGetResponse model module.
 * @module model/SDGameGetResponse
 * @version 0.0.3
 */
class SDGameGetResponse {
    /**
     * Constructs a new <code>SDGameGetResponse</code>.
     * This is the data output json model
     * @alias module:model/SDGameGetResponse
     * @param id {Number} Game ID Number (unsigned 32 bit integer)
     * @param ownerId {String} Game Owner ID
     * @param name {String} Game name
     * @param desc {String} Game description
     * @param image {String} Game image
     * @param bucketName {String} Game bucket name
     */
    constructor(id, ownerId, name, desc, image, bucketName) { 
        
        SDGameGetResponse.initialize(this, id, ownerId, name, desc, image, bucketName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, ownerId, name, desc, image, bucketName) { 
        obj['id'] = id;
        obj['ownerId'] = ownerId;
        obj['name'] = name;
        obj['desc'] = desc;
        obj['image'] = image;
        obj['bucketName'] = bucketName;
    }

    /**
     * Constructs a <code>SDGameGetResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SDGameGetResponse} obj Optional instance to populate.
     * @return {module:model/SDGameGetResponse} The populated <code>SDGameGetResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SDGameGetResponse();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('ownerId')) {
                obj['ownerId'] = ApiClient.convertToType(data['ownerId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('desc')) {
                obj['desc'] = ApiClient.convertToType(data['desc'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('bucketName')) {
                obj['bucketName'] = ApiClient.convertToType(data['bucketName'], 'String');
            }
            if (data.hasOwnProperty('news')) {
                obj['news'] = ApiClient.convertToType(data['news'], 'String');
            }
            if (data.hasOwnProperty('fees')) {
                obj['fees'] = ApiClient.convertToType(data['fees'], [SDGameGetResponseFeesInner]);
            }
            if (data.hasOwnProperty('props')) {
                obj['props'] = ApiClient.convertToType(data['props'], Object);
            }
            if (data.hasOwnProperty('testMode')) {
                obj['testMode'] = ApiClient.convertToType(data['testMode'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SDGameGetResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SDGameGetResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SDGameGetResponse.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ownerId'] && !(typeof data['ownerId'] === 'string' || data['ownerId'] instanceof String)) {
            throw new Error("Expected the field `ownerId` to be a primitive type in the JSON string but got " + data['ownerId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['desc'] && !(typeof data['desc'] === 'string' || data['desc'] instanceof String)) {
            throw new Error("Expected the field `desc` to be a primitive type in the JSON string but got " + data['desc']);
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // ensure the json data is a string
        if (data['bucketName'] && !(typeof data['bucketName'] === 'string' || data['bucketName'] instanceof String)) {
            throw new Error("Expected the field `bucketName` to be a primitive type in the JSON string but got " + data['bucketName']);
        }
        // ensure the json data is a string
        if (data['news'] && !(typeof data['news'] === 'string' || data['news'] instanceof String)) {
            throw new Error("Expected the field `news` to be a primitive type in the JSON string but got " + data['news']);
        }
        if (data['fees']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fees'])) {
                throw new Error("Expected the field `fees` to be an array in the JSON data but got " + data['fees']);
            }
            // validate the optional field `fees` (array)
            for (const item of data['fees']) {
                SDGameGetResponseFeesInner.validateJSON(item);
            };
        }

        return true;
    }


}

SDGameGetResponse.RequiredProperties = ["id", "ownerId", "name", "desc", "image", "bucketName"];

/**
 * Game ID Number (unsigned 32 bit integer)
 * @member {Number} id
 */
SDGameGetResponse.prototype['id'] = undefined;

/**
 * Game Owner ID
 * @member {String} ownerId
 */
SDGameGetResponse.prototype['ownerId'] = undefined;

/**
 * Game name
 * @member {String} name
 */
SDGameGetResponse.prototype['name'] = undefined;

/**
 * Game description
 * @member {String} desc
 */
SDGameGetResponse.prototype['desc'] = undefined;

/**
 * Game image
 * @member {String} image
 */
SDGameGetResponse.prototype['image'] = undefined;

/**
 * Game bucket name
 * @member {String} bucketName
 */
SDGameGetResponse.prototype['bucketName'] = undefined;

/**
 * Game news
 * @member {String} news
 */
SDGameGetResponse.prototype['news'] = undefined;

/**
 * @member {Array.<module:model/SDGameGetResponseFeesInner>} fees
 */
SDGameGetResponse.prototype['fees'] = undefined;

/**
 * Game properties
 * @member {Object} props
 */
SDGameGetResponse.prototype['props'] = undefined;

/**
 * If on test mode features are enabled. Currently in development.
 * @member {Boolean} testMode
 */
SDGameGetResponse.prototype['testMode'] = undefined;






export default SDGameGetResponse;

