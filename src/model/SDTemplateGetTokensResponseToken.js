/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-05-08T04:33:59Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SDTemplateGetTokensResponseTokenProps from './SDTemplateGetTokensResponseTokenProps';

/**
 * The SDTemplateGetTokensResponseToken model module.
 * @module model/SDTemplateGetTokensResponseToken
 * @version 0.0.3
 */
class SDTemplateGetTokensResponseToken {
    /**
     * Constructs a new <code>SDTemplateGetTokensResponseToken</code>.
     * @alias module:model/SDTemplateGetTokensResponseToken
     * @param id {Number} Token ID Number (unsigned 32 bit integer)
     * @param amount {String} u64 Number as String, min: 0, max: 9223372036854775807 (ex. \"6\")
     */
    constructor(id, amount) { 
        
        SDTemplateGetTokensResponseToken.initialize(this, id, amount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, amount) { 
        obj['id'] = id;
        obj['amount'] = amount;
    }

    /**
     * Constructs a <code>SDTemplateGetTokensResponseToken</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SDTemplateGetTokensResponseToken} obj Optional instance to populate.
     * @return {module:model/SDTemplateGetTokensResponseToken} The populated <code>SDTemplateGetTokensResponseToken</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SDTemplateGetTokensResponseToken();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('templateId')) {
                obj['templateId'] = ApiClient.convertToType(data['templateId'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('props')) {
                obj['props'] = SDTemplateGetTokensResponseTokenProps.constructFromObject(data['props']);
            }
            if (data.hasOwnProperty('publicMetadata')) {
                obj['publicMetadata'] = ApiClient.convertToType(data['publicMetadata'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SDTemplateGetTokensResponseToken</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SDTemplateGetTokensResponseToken</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SDTemplateGetTokensResponseToken.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `props`
        if (data['props']) { // data not null
          SDTemplateGetTokensResponseTokenProps.validateJSON(data['props']);
        }

        return true;
    }


}

SDTemplateGetTokensResponseToken.RequiredProperties = ["id", "amount"];

/**
 * Token ID Number (unsigned 32 bit integer)
 * @member {Number} id
 */
SDTemplateGetTokensResponseToken.prototype['id'] = undefined;

/**
 * u64 Number as String, min: 0, max: 9223372036854775807 (ex. \"6\")
 * @member {String} amount
 */
SDTemplateGetTokensResponseToken.prototype['amount'] = undefined;

/**
 * Template ID Number (unsigned 32 bit integer)
 * @member {Number} templateId
 */
SDTemplateGetTokensResponseToken.prototype['templateId'] = undefined;

/**
 * Template Name
 * @member {String} name
 */
SDTemplateGetTokensResponseToken.prototype['name'] = undefined;

/**
 * @member {module:model/SDTemplateGetTokensResponseTokenProps} props
 */
SDTemplateGetTokensResponseToken.prototype['props'] = undefined;

/**
 * Returned to marketplaces as token metadata
 * @member {Object} publicMetadata
 */
SDTemplateGetTokensResponseToken.prototype['publicMetadata'] = undefined;






export default SDTemplateGetTokensResponseToken;

