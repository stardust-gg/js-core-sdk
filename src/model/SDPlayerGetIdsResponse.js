/**
 * Stardust API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-05-08T04:33:59Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SDPlayerGetIdsResponse model module.
 * @module model/SDPlayerGetIdsResponse
 * @version 0.0.3
 */
class SDPlayerGetIdsResponse {
    /**
     * Constructs a new <code>SDPlayerGetIdsResponse</code>.
     * This is the data output json model, i.e. {\&quot;uniqueId\&quot;: \&quot;playerId\&quot;} 
     * @alias module:model/SDPlayerGetIdsResponse
     * @param playerId {String} Player ID in the form of a UUID
     * @param uniqueId {String} Player ID in the form of a the game player's internal playerId, i.e. email address, uuid
     */
    constructor(playerId, uniqueId) { 
        
        SDPlayerGetIdsResponse.initialize(this, playerId, uniqueId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, playerId, uniqueId) { 
        obj['playerId'] = playerId;
        obj['uniqueId'] = uniqueId;
    }

    /**
     * Constructs a <code>SDPlayerGetIdsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SDPlayerGetIdsResponse} obj Optional instance to populate.
     * @return {module:model/SDPlayerGetIdsResponse} The populated <code>SDPlayerGetIdsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SDPlayerGetIdsResponse();

            if (data.hasOwnProperty('playerId')) {
                obj['playerId'] = ApiClient.convertToType(data['playerId'], 'String');
            }
            if (data.hasOwnProperty('uniqueId')) {
                obj['uniqueId'] = ApiClient.convertToType(data['uniqueId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SDPlayerGetIdsResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SDPlayerGetIdsResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SDPlayerGetIdsResponse.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['playerId'] && !(typeof data['playerId'] === 'string' || data['playerId'] instanceof String)) {
            throw new Error("Expected the field `playerId` to be a primitive type in the JSON string but got " + data['playerId']);
        }
        // ensure the json data is a string
        if (data['uniqueId'] && !(typeof data['uniqueId'] === 'string' || data['uniqueId'] instanceof String)) {
            throw new Error("Expected the field `uniqueId` to be a primitive type in the JSON string but got " + data['uniqueId']);
        }

        return true;
    }


}

SDPlayerGetIdsResponse.RequiredProperties = ["playerId", "uniqueId"];

/**
 * Player ID in the form of a UUID
 * @member {String} playerId
 */
SDPlayerGetIdsResponse.prototype['playerId'] = undefined;

/**
 * Player ID in the form of a the game player's internal playerId, i.e. email address, uuid
 * @member {String} uniqueId
 */
SDPlayerGetIdsResponse.prototype['uniqueId'] = undefined;






export default SDPlayerGetIdsResponse;

